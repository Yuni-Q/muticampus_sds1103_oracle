[서브쿼리 : select 조회 수행 결과를 메인쿼리에 반영하고자 할 때 사용함.]
 1> SELECT SALARY FROM EMPLOYEE WHERE ENAME='WARD';
 2> SELECT ENO,ENAME,SALARY FROM EMPLOYEE
	WHERE SALARY > (1의 수행결과 급여값);
 1+2> SELECT ENO,ENAME,SALARY FROM EMPLOYEE
	WHERE SALARY > 
			(SELECT SALARY FROM EMPLOYEE 
			WHERE ENAME='WARD');
--------------------------------------------------------------------------------------------
exercise 1: SCOTT과 같은 부서에 있는 직원 목록을 조회
 > sub (SELECT DNO FROM EMPLOYEE WHERE ENAME='SCOTT')
 > SELECT * FROM EMPLOYEE 
	WHERE DNO=
		(SELECT DNO FROM EMPLOYEE WHERE ENAME='SCOTT');
exercise 2: 최소급여를 받는 사원의 이름, 담당업무, 급여 조회
 > sub (SELECT MIN(SALARY) FROM EMPLOYEE)
 > SELECT ENAME, JOB, SALARY FROM EMPLOYEE
	WHERE SALARY=
		(SELECT MIN(SALARY) FROM EMPLOYEE);
exercise 3: 전체사원의 평균 급여보다 급여를 많이 받는 사원 조회
 > sub (SELECT AVG(SALARY) FROM EMPLOYEE)
 > SELECT ENO, ENAME, SALARY FROM EMPLOYEE
	WHERE SALARY>
		(SELECT AVG(SALARY) FROM EMPLOYEE);
exercise 4: 평균급여가 30번 부서의 평균 급여보다 높은 부서 조회
 > sub (SELECT AVG(SALARY) FROM EMPLOYEE WHERE DNO=30)
 > SELECT DNO, AVG(SALARY) FROM EMPLOYEE
	GROUP BY DNO
	HAVING AVG(SALARY) > 
		(SELECT AVG(SALARY) FROM EMPLOYEE WHERE DNO=30);
----------------------------------------------------------------------------------------------
 아래와 같은 서브쿼리는 흔히 발생할 수 있는 오류임
 > SELECT ENO, ENAME FROM EMPLOYEE
	WHERE SALARY = 
		(SELECT MIN(SALARY) FROM EMPLOYEE GROUP BY DNO);
-----------------------------------------------------------------------------------------------
[다중행 서브쿼리] : 서브쿼리의 수행 결과가 여러개의 행일 때 그 결과를 메인 쿼리의
	WHERE 조건에서 비교하는데 쓰는 경우 =,>,< 연산자 대신
	IN, ANY, ALL 등의 연산자를 사용해서 비교해야 함.
-----------------------------------------------------------------------------------------------
IN 연산자 : 서브쿼리의 실행결과 행들 중 메인쿼리의 조건과 일치하는 값이 하나라도
	있으면 조건은 true가 됨.
 > sub (SELECT DNO FROM DEPARTMENT WHERE DNO>10)
 > SELECT ENO, ENAME, DNO FROM EMPLOYEE
	WHERE DNO IN (SELECT DNO FROM DEPARTMENT WHERE DNO>10);
-----------------------------------------------------------------------------------------------
ANY 연산자 : 서브쿼리 결과 집합들 중 하나라도
ALL 연산자 : 서브쿼리 결과집합 모든 레코드와 비교해서
 > SELECT ENO, ENAME, SALARY FROM EMPLOYEE
	WHERE SALARY > ANY
		(SELECT AVG(SALARY) FROM EMPLOYEE GROUP BY DNO);
 사실 위의 ANY 예제는 아래와 실행결과가 같음
 > SELECT ENO, ENAME, SALARY FROM EMPLOYEE
	WHERE SALARY > 
		(SELECT MIN(AVG(SALARY)) FROM EMPLOYEE 
		GROUP BY DNO);

 > SELECT ENO, ENAME, SALARY FROM EMPLOYEE
	WHERE SALARY > ALL
		(SELECT AVG(SALARY) FROM EMPLOYEE GROUP BY DNO);
 위의 ALL 예제도 아래의 MAX 실행결과와 같은 결과가 나옴.
 > SELECT ENO, ENAME, SALARY FROM EMPLOYEE
	WHERE SALARY > 
		(SELECT MAX(AVG(SALARY)) FROM EMPLOYEE 
		GROUP BY DNO);
---------------------------------------------------------------------------------------------
[서브쿼리 현실적 용도] : FROM에도 WHERE에도 서브쿼리가 들어갈 수 있으며,
	SELECT 쿼리 외에도 UPDATE, DELETE 등에도 사용될 수 있음.
 > SELECT ENO, ENAME, DNO, DNAME 
	FROM
	(SELECT * FROM EMPLOYEE NATURAL JOIN DEPARTMENT)
	WHERE
	DNO=20 OR DNO=30;
 > DELETE FROM EMPLOYEE
	WHERE SALARY>(SELECT AVG(SALARY) FROM EMPLOYEE);
----------------------------------------------------------------------------------------------
[ROWNUM 가상칼럼 사용예시]
 > SELECT ENO, ENAME, SALARY FROM EMPLOYEE 
	ORDER BY SALARY DESC;
 > SELECT ROWNUM, ENO, ENAME, SALARY
	FROM
		(SELECT ENO, ENAME, SALARY FROM EMPLOYEE 
		ORDER BY SALARY DESC) 
	WHERE 
		ROWNUM<=5;
 
















